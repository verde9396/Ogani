// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WouldYouGetItDone.Data;

namespace WouldYouGetItDone.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20200909152905_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WouldYouGetItDone.Data.Goods", b =>
                {
                    b.Property<Guid>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("Discount")
                        .HasColumnType("tinyint");

                    b.Property<string>("GoodsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Imgs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<double?>("ReviewScore")
                        .HasColumnType("float");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("GoodsId");

                    b.HasIndex("GoodsName")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.GoodsTag", b =>
                {
                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("GoodsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagKey", "GoodsId");

                    b.HasIndex("GoodsId");

                    b.ToTable("GoodsTag");
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.ReviewGoods", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Criteria")
                        .HasColumnType("int");

                    b.Property<Guid>("GoodsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReviewDay")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ReviewScore")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Criteria");

                    b.HasIndex("GoodsId");

                    b.ToTable("GetReviewGoods");
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.SubImg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GoodsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.ToTable("SubImg");
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.Tag", b =>
                {
                    b.Property<string>("TagKey")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TagValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagKey");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(100)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.HasIndex("GeTypeId");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.Goods", b =>
                {
                    b.HasOne("WouldYouGetItDone.Data.Type", "Type")
                        .WithMany("Goods")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.GoodsTag", b =>
                {
                    b.HasOne("WouldYouGetItDone.Data.Goods", "Goods")
                        .WithMany("GoodsTags")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WouldYouGetItDone.Data.Tag", "Tag")
                        .WithMany("GoodsTags")
                        .HasForeignKey("TagKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.ReviewGoods", b =>
                {
                    b.HasOne("WouldYouGetItDone.Data.Review", "Review")
                        .WithMany("ReviewGood")
                        .HasForeignKey("Criteria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WouldYouGetItDone.Data.Goods", "Goods")
                        .WithMany("ReviewGoods")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.SubImg", b =>
                {
                    b.HasOne("WouldYouGetItDone.Data.Goods", "Goods")
                        .WithMany("SubImgs")
                        .HasForeignKey("GoodsId");
                });

            modelBuilder.Entity("WouldYouGetItDone.Data.Type", b =>
                {
                    b.HasOne("WouldYouGetItDone.Data.Type", "GeType")
                        .WithMany()
                        .HasForeignKey("GeTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
